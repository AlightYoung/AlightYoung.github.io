(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{488:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("Badge",{attrs:{text:"简单",type:"tip"}}),s._v(" "),t("p",[s._v("原题链接："),t("a",{attrs:{href:"https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"题目描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[s._v("#")]),s._v(" 题目描述")]),s._v(" "),t("p",[s._v("给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。")]),s._v(" "),t("p",[s._v("更正式地说，root.val = min(root.left.val, root.right.val) 总成立。")]),s._v(" "),t("p",[s._v("给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("示例 1")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg",alt:"smbt1.jpg"}}),t("br"),s._v("\n输入：root = [2,2,5,null,null,5,7]"),t("br"),s._v("\n输出：5"),t("br"),s._v("\n解释：最小的值是 2 ，第二小的值是 5 。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("示例 2")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg",alt:"smbt2.jpg"}}),t("br"),s._v("\n输入：root = [2,2,2]"),t("br"),s._v("\n输出：-1"),t("br"),s._v("\n解释：最小的值是 2, 但是不存在第二小的值。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("提示")]),s._v(" "),t("p",[s._v("树中节点数目在范围 [1, 25] 内"),t("br"),s._v("\n1 <= Node.val <= 231 - 1"),t("br"),s._v("\n对于树中每个节点 root.val == min(root.left.val, root.right.val)")])]),s._v(" "),t("h2",{attrs:{id:"python题解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python题解"}},[s._v("#")]),s._v(" Python题解")]),s._v(" "),t("h3",{attrs:{id:"方法一-深度优先搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法一-深度优先搜索"}},[s._v("#")]),s._v(" 方法一：深度优先搜索")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("思路&算法&细节&复杂度")]),s._v(" "),t("p",[t("strong",[s._v("思路")])]),s._v(" "),t("p",[s._v("根据题目中的描述「如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个」，我们可以知道，对于二叉树中的任意节点 xx，xx 的值不大于其所有子节点的值，因此：")]),s._v(" "),t("p",[s._v("对于二叉树中的任意节点 xx，xx 的值不大于以 xx 为根的子树中所有节点的值。")]),s._v(" "),t("p",[s._v("令 xx 为二叉树的根节点，此时我们可以得出结论：")]),s._v(" "),t("p",[s._v("二叉树根节点的值即为所有节点中的最小值。")]),s._v(" "),t("p",[s._v("因此，我们可以对整棵二叉树进行一次遍历。设根节点的值为 rootvalue，我们只需要通过遍历，找出严格大于 rootvalue 的最小值，即为「所有节点中的第二小的值」。")]),s._v(" "),t("p",[t("strong",[s._v("算法")])]),s._v(" "),t("p",[s._v("我们可以使用深度优先搜索的方法对二叉树进行遍历。")]),s._v(" "),t("p",[s._v("假设当前遍历到的节点为 node，如果 node 的值严格大于 rootvalue，那么我们就可以用 node 的值来更新答案 ans。")]),s._v(" "),t("p",[s._v("当我们遍历完整棵二叉树后，即可返回 ans。")]),s._v(" "),t("p",[t("strong",[s._v("细节")])]),s._v(" "),t("p",[s._v("根据题目要求，如果第二小的值不存在的话，输出 -1−1，那么我们可以将 ans 的初始值置为 -1−1。在遍历的过程中，如果当前节点的值严格大于 rootvalue 的节点时，那么只要 ans 的值为 -1−1 或者当前节点的值严格小于 ans，我们就需要对 ans 进行更新。")]),s._v(" "),t("p",[s._v("此外，如果当前节点的值大于等于 ans，那么根据「思路」部分，以当前节点为根的子树中所有节点的值都大于等于 ans，我们就直接回溯，无需对该子树进行遍历。这样做可以省去不必要的遍历过程。")]),s._v(" "),t("p",[t("strong",[s._v("复杂度分析")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("时间复杂度：O(n)O(n)，其中 nn 是二叉树中的节点个数。我们最多需要对整棵二叉树进行一次遍历。")])]),s._v(" "),t("li",[t("p",[s._v("空间复杂度：O(n)O(n)。我们使用深度优先搜索的方法进行遍历，需要使用的栈空间为 O(n)O(n)。")])])])]),s._v(" "),t("p",[s._v("题解用的是Python3 "),t("code",[s._v("nonlocal")]),s._v("关键字，这里用global替代了一下。")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Definition for a binary tree node.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# class TreeNode(object):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     def __init__(self, val=0, left=None, right=None):")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         self.val = val")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         self.left = left")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         self.right = right")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findSecondMinimumValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n        :type root: TreeNode\n        :rtype: int\n        """')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" ans\n        ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        rootvalue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val\n\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dfs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" ans\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" rootvalue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val\n\n            dfs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            dfs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        dfs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ans\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("写了挺久没写出来，主要是树的遍历，不了解BFS和DFS。")])],1)}),[],!1,null,null,null);t.default=e.exports}}]);
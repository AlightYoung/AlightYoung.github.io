(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{492:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("Badge",{attrs:{text:"简单",type:"tip"}}),t._v(" "),s("p",[t._v("原题链接："),s("a",{attrs:{href:"https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),s("p",[t._v("给你一个大小为 m * n 的矩阵 mat，矩阵由若干军人和平民组成，分别用 1 和 0 表示。")]),t._v(" "),s("p",[t._v("请你返回矩阵中战斗力最弱的 k 行的索引，按从最弱到最强排序。")]),t._v(" "),s("p",[t._v("如果第 i 行的军人数量少于第 j 行，或者两行军人数量相同但 i 小于 j，那么我们认为第 i 行的战斗力比第 j 行弱。")]),t._v(" "),s("p",[t._v("军人 总是 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("示例 1")]),t._v(" "),s("p",[t._v("输入：mat ="),s("br"),t._v("\n[[1,1,0,0,0],"),s("br"),t._v("\n[1,1,1,1,0],"),s("br"),t._v("\n[1,0,0,0,0],"),s("br"),t._v("\n[1,1,0,0,0],"),s("br"),t._v("\n[1,1,1,1,1]],"),s("br"),t._v("\nk = 3"),s("br"),t._v("\n输出：[2,0,3]"),s("br"),t._v("\n解释："),s("br"),t._v("\n每行中的军人数目："),s("br"),t._v("\n行 0 -> 2"),s("br"),t._v("\n行 1 -> 4"),s("br"),t._v("\n行 2 -> 1"),s("br"),t._v("\n行 3 -> 2"),s("br"),t._v("\n行 4 -> 5"),s("br"),t._v("\n从最弱到最强对这些行排序后得到 [2,0,3,1,4]")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("示例 2")]),t._v(" "),s("p",[t._v("输入：mat ="),s("br"),t._v("\n[[1,0,0,0],"),s("br"),t._v("\n[1,1,1,1],"),s("br"),t._v("\n[1,0,0,0],"),s("br"),t._v("\n[1,0,0,0]],"),s("br"),t._v("\nk = 2"),s("br"),t._v("\n输出：[0,2]"),s("br"),t._v("\n解释："),s("br"),t._v("\n每行中的军人数目："),s("br"),t._v("\n行 0 -> 1"),s("br"),t._v("\n行 1 -> 4"),s("br"),t._v("\n行 2 -> 1"),s("br"),t._v("\n行 3 -> 1"),s("br"),t._v("\n从最弱到最强对这些行排序后得到 [0,2,3,1]")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("提示")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("m == mat.length")])]),t._v(" "),s("li",[s("code",[t._v("n == mat[i].length")])]),t._v(" "),s("li",[s("code",[t._v("2 <= n, m <= 100")])]),t._v(" "),s("li",[s("code",[t._v("1 <= k <= m")])]),t._v(" "),s("li",[s("code",[t._v("matrix[i][j]")]),t._v(" 不是 0 就是 1")])])]),t._v(" "),s("h2",{attrs:{id:"python题解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python题解"}},[t._v("#")]),t._v(" Python题解")]),t._v(" "),s("h3",{attrs:{id:"个人题解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#个人题解"}},[t._v("#")]),t._v(" 个人题解")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("kWeakestRows")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        :type mat: List[List[int]]\n        :type k: int\n        :rtype: List[int]\n        """')]),t._v("\n        powers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            power "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" column "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" mat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                power "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" column\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" column "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n            powers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("power"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        powers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" power"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" row "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" powers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n            ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("题比较简单，但是官方题解有两个比较高级的解法。")]),t._v(" "),s("p",[t._v("一个是二分查找+堆，另一个是二分查找+快速选择。（看不懂）")])],1)}),[],!1,null,null,null);s.default=r.exports}}]);
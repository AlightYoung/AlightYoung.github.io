(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{510:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("之前一直有想法搭建一个私服，当时主要看到普遍采取的解决方案是 Gitlab，然而启动该项目需要至少 4G 的内存，这对于服务器资源有限的人来说，十分不友好，并且 Gitlab 的管理功能基本是针对团队场景开发的，对于个人而言有些杀鸡牛刀了。")]),s._v(" "),t("p",[s._v("于是，便找到了另外一个方案，直接通过 Git 创建裸仓库（bare repo）。然后通过 SSH 的方式进行代码传输。该方案虽然简单，但是对于个人用户的小型服务器十分友好。")]),s._v(" "),t("h2",{attrs:{id:"前提"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前提"}},[s._v("#")]),s._v(" 前提")]),s._v(" "),t("ul",[t("li",[s._v("服务器一台")])]),s._v(" "),t("h2",{attrs:{id:"步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[s._v("#")]),s._v(" 步骤")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("首先是在服务器安装 Git。主流 Linux 发行版基本都可以通过原生的包管理器获取，这里不过多介绍，下载安装之后通过 "),t("code",[s._v("git --version")]),s._v(" 检查是否成功安装即可。")])]),s._v(" "),t("li",[t("p",[s._v("随后创建一个非 sudo 组的新用户专门用于存储 Git 远程仓库。这样会比较安全，即使你只是一个人使用，但万一呢，如果你实在不想创建，则可以直接到步骤 3。")])])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建 git 用户")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("useradd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 给 git 用户设置一个密码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("passwd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("创建服务端的 Git bare repo。")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换到 git 用户")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("su")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入到 git 的 home 目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个文件夹用做仓库")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" repo_name.git\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入到该仓库")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" repo_name.git\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 初始化为裸仓库（只包含.git下的内容）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--bare")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("如果你需要将 bare repo 的默认分支切换为 main，可以使用 "),t("code",[s._v("git symbolic-ref HEAD refs/heads/main")]),s._v("。普通仓库类型设置默认分支比较简单，可以自行百度或者参考以下链接。")]),s._v(" "),t("p",[s._v("参考链接："),t("a",{attrs:{href:"https://stackoverflow.com/questions/42871542/how-can-i-create-a-git-repository-with-the-default-branch-name-other-than-maste",target:"_blank",rel:"noopener noreferrer"}},[s._v('Stack Overflow - How can I create a Git repository with the default branch name other than "master"?'),t("OutboundLink")],1)])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("通过以上命令，你已经成功创建了一个远程仓库！现在你需要让用户能够 SSH 到该用户，你需要完成以下操作：")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 本地创建 SSH 密钥，如果有可以跳过")]),s._v("\nssh-keygen\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拷贝本地的公钥，通常是在用户目录下的 .ssh/id_rsa.pub")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 复制该公钥到服务器的 git 用户的家目录下的 .ssh/authorized_keys 中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通常情况这个文件夹（.ssh）和文件（authorized_keys）是不存在的，需要你自己创建")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[s._v("在完成上述步骤后，你就已经完成了全部绝大部分工作了！现在分为两种情况。")]),s._v(" "),t("ol",[t("li",[s._v("第一种为你已经有一个本地仓库了，你只想 push 本地仓库到这个远程仓库，那么你只需要绑定远程仓库即可，例如 "),t("code",[s._v("git remote add origin git@ip:repo_name.git")]),s._v("。")]),s._v(" "),t("li",[s._v("第二种情况就是你没有本地仓库，那么你仅仅只需要通过 "),t("code",[s._v("git clone git@ip:repo_name.git")]),s._v(" 即可拷贝空项目至本地并建立本地仓库与远程仓库的关联了。")])])])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("由于之前我们是直接将项目放在 git 用户的家目录下，因此这里没有涉及到相对路径，如果你的项目是在 git 用户目录下的子目录中，那么则可以改为 git 目录下的相对路径。例如仓库保存至服务端的 "),t("code",[s._v("/home/git/repo/repo_name.git")]),s._v("，那么上述的 clone 或者 remote 之后的路径就是 "),t("code",[s._v("repo/repo_name.git")])])]),t("h2",{attrs:{id:"最后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[s._v("#")]),s._v(" 最后")]),s._v(" "),t("p",[s._v("稍微解释以下 bare repo。其实就是在普通仓库下的 .git 目录已经包含了 git 需要的全部信息，包括代码。这些信息会被压缩打包保存 .git 目录中，只不过没有项目结构那么直观。")]),s._v(" "),t("p",[s._v("因此对于服务端而言，保存为 bare repo，然后每次 push 至该仓库都只是重新生产 .git 目录下的文件并上传至服务端的 repo_name.git 目录中。")]),s._v(" "),t("p",[s._v("Enjoy the Git。")])])}),[],!1,null,null,null);t.default=n.exports}}]);